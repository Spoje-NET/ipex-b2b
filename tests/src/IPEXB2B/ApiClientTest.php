<?php

declare(strict_types=1);

/**
 * This file is part of the IpexB2B package
 *
 * https://github.com/Spoje-NET/ipex-b2b
 *
 * (c) Spoje.Net <https://spoje.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\IPEXB2B;

use IPEXB2B\ApiClient;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-16 at 21:05:02.
 */
class ApiClientTest extends \PHPUnit\Framework\TestCase
{
    protected ApiClient $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new ApiClient();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \IPEXB2B\ApiClient::setUp
     */
    public function testSetUp(): void
    {
        $this->object->setUp(
            [
                'url' => 'url',
                'user' => 'usr',
                'password' => 'pwd',
                'section' => 'sec',
                'debug' => true,
                'defaultUrlParams' => ['limit' => 10],
                'ignore404' => true,
                'offline' => true,
            ],
        );
        $this->assertEquals('url', $this->object->url);
        $this->assertEquals('usr', $this->object->user);
        $this->assertEquals('sec', $this->object->section);
        $this->assertEquals('pwd', $this->object->password);
    }

    /**
     * @covers \IPEXB2B\ApiClient::curlInit
     */
    public function testCurlInit(): void
    {
        $this->object->curlInit();
        $this->assertTrue(\is_resource($this->object->curl));
    }

    /**
     * @covers \IPEXB2B\ApiClient::processInit
     */
    public function testProcessInit(): void
    {
        $this->object->processInit(1);
        $this->object->processInit(['id' => 1]);
    }

    /**
     * @covers \IPEXB2B\ApiClient::getSection
     * @covers \IPEXB2B\ApiClient::setSection
     */
    public function testSection(): void
    {
        $this->object->setSection('tested');
        $this->assertEquals('tested', $this->object->getSection());
    }

    /**
     * @covers \IPEXB2B\ApiClient::setPostFields
     */
    public function testSetPostFields(): void
    {
        $this->assertEquals('test', $this->object->setPostFields('test'));
    }

    /**
     * @covers \IPEXB2B\ApiClient::getSectionURL
     */
    public function testGetSectionURL(): void
    {
        $this->object->getSectionURL();
    }

    /**
     * @covers \IPEXB2B\ApiClient::setUrlParams
     */
    public function testSetUrlParams(): void
    {
        $this->assertEquals(
            ['a' => 'b'],
            $this->object->setUrlParams(['a' => 'b']),
        );
        $this->assertEquals(
            ['a' => 'b', 'd' => 'e'],
            $this->object->setUrlParams(['d' => 'e']),
        );
    }

    /**
     * @covers \IPEXB2B\ApiClient::updateApiURL
     */
    public function testUpdateApiURL(): void
    {
        $this->object->updateApiURL();
    }

    /**
     * @covers \IPEXB2B\ApiClient::requestData
     */
    public function testRequestData(): void
    {
        $this->object->requestData();
    }

    /**
     * @covers \IPEXB2B\ApiClient::rawResponseToArray
     */
    public function testRawResponseToArray(): void
    {
        $this->object->rawResponseToArray('{}');
    }

    /**
     * @covers \IPEXB2B\ApiClient::parseResponse
     */
    public function testParseResponse(): void
    {
        $this->object->parseResponse([], 200);
    }

    /**
     * @covers \IPEXB2B\ApiClient::parseError
     */
    public function testParseError(): void
    {
        $this->object->parseError(['statusCode' => '200', 'error' => 'OK', 'message' => 'tested']);
    }

    /**
     * @covers \IPEXB2B\ApiClient::doCurlRequest
     */
    public function testDoCurlRequest(): void
    {
        $this->object->doCurlRequest($this->object->apiURL, 'GET');
    }

    /**
     * @covers \IPEXB2B\ApiClient::loadFromIPEX
     */
    public function testLoadFromIPEX(): void
    {
        $this->object->loadFromIPEX('');
    }

    /**
     * @covers \IPEXB2B\ApiClient::logResult
     */
    public function testLogResult(): void
    {
        $this->object->logResult(['statusCode' => '200', 'error' => 'OK', 'message' => 'tested']);
    }

    /**
     * @covers \IPEXB2B\ApiClient::ipexDateTimeToDateTime
     */
    public function testIpexDateTimeToDateTime(): void
    {
        $phpDateTime = ApiClient::ipexDateTimeToDateTime('2018-04-30T23:59:59.000Z');
        $this->assertEquals('1525125599', $phpDateTime->format('U'));
    }

    /**
     * @covers \IPEXB2B\ApiClient::getTokenString
     */
    public function testGetTokenString(): void
    {
        $this->assertNotEmpty($this->object->getTokenString());
    }

    /**
     * @covers \IPEXB2B\ApiClient::ignore404
     */
    public function testIgnore404(): void
    {
        $this->assertTrue($this->object->ignore404(true));
    }

    /**
     * @covers \IPEXB2B\ApiClient::disconnect
     */
    public function testDisconnect(): void
    {
        $this->object->disconnect();
    }

    /**
     * @covers \IPEXB2B\ApiClient::__wakeup
     */
    public function testWakeup(): void
    {
        $this->object->__wakeup();
    }

    /**
     * @covers \IPEXB2B\ApiClient::__destruct
     */
    public function testDestruct(): void
    {
        $this->object->__destruct();
    }
}
